#!/usr/bin/ruby

require 'sqlite3'
require 'pp'
require 'net/http'
require 'json'
require 'inifile'

bin_path = File.expand_path(File.dirname(__FILE__))
lib_path = "#{bin_path}/../lib"
libexec_path = "#{bin_path}/../lib"
inifile = IniFile.load("#{bin_path}/../conf/SL-Distruby.ini")
section = inifile['SL-Distruby']
key = section["SL_API_key"]
database_name = section["database_name"]
database = "#{bin_path}/../db/#{database_name}"

db = SQLite3::Database.new database
db = SQLite3::Database.open database
db.execute "CREATE TABLE IF NOT EXISTS Dev(Id INTEGER PRIMARY KEY,DevCaseGid NUMBER, DevMessageVersionNumber NUMBER, LineNumber NUMBER)"
db.execute "CREATE TABLE IF NOT EXISTS users(uid INTEGER PRIMARY KEY,name TEXT, push_service TEXT, push_api_key TEXT);"
db.execute "CREATE TABLE IF NOT EXISTS notifications(uid INTEGER,line TEXT);"
db.execute "CREATE UNIQUE INDEX IF NOT EXISTS uniq on notifications (uid,line);"

uri = URI("https://api.sl.se/api2/deviationsrawdata.json?key=#{key}")
response = Net::HTTP.get_response(uri)

if response.code == "200"
    result = JSON.parse(response.body)
    result["ResponseData"].each do |entry|
        _DevCaseGid = nil
        new_DevMessageVersionNumber = nil
        _DevCaseGid = entry["DevCaseGid"]
        _Header = entry["Header"]
        _Details = entry["Details"]
        _Details << " Priority #{entry["Priority"]}"
        _LineNumber = entry["LineNumber"].to_i
        new_DevMessageVersionNumber = entry["DevMessageVersionNumber"]
        _DevMessageVersionNumber = db.get_first_value "SELECT DevMessageVersionNumber FROM Dev WHERE DevCaseGid = :_DevCaseGid and LineNumber = :_LineNumber ORDER BY DevMessageVersionNumber DESC LIMIT 1", _DevCaseGid,_LineNumber
        if _DevMessageVersionNumber.nil?
            _DevMessageVersionNumber = 0
        end

        # Handle newer data then the data in the database.
        if _DevMessageVersionNumber < new_DevMessageVersionNumber
            db.execute "INSERT INTO Dev(DevCaseGid,DevMessageVersionNumber,LineNumber) VALUES (?,?,?)", _DevCaseGid,new_DevMessageVersionNumber, _LineNumber

            stm = db.prepare "SELECT users.uid,name,push_service,push_api_key FROM users,notifications WHERE users.uid = notifications.uid and line = :_LineNumber"
            rs = stm.execute _LineNumber
            db.results_as_hash = true

            rs.each do |row|
                puts "Trying to push \"#{_Header}\" to #{row['name']}(#{row['uid']}) through #{row['push_service']}(#{row['push_api_key']})."
                if File.exist?("#{lib_path}/#{row['push_service']}")
                    load "#{lib_path}/#{row['push_service']}"
                    push_method(row['push_api_key'],_Header,_Details)
                elsif File.exist?("#{libexec_path}/#{row['push_service']}")
                    system "#{libexec_path}/#{row['push_service']}",push_api_key,_Header,_Details
                else
                    puts "unknown #{row['push_service']}"
                end
            end

            stm.close
        end
    end
else 
    puts "ERROR"
end

db.close if db
