#!/usr/bin/ruby

require 'sqlite3'
require 'pp'
require 'net/http'
require 'json'
require 'inifile'


bin_path = File.expand_path(File.dirname(__FILE__))
lib_path = "#{bin_path}/../lib"
libexec_path = "#{bin_path}/../libexec"
@inifile = IniFile.load("#{bin_path}/../conf/SL-distruby.ini")
section = @inifile['SL-Distruby']
dev_key = section["SL_API_dev_key"]
traffic_key = section["SL_API_traffic_key"]
database_name = section["database_name"]
database = "#{bin_path}/../db/#{database_name}"

db = SQLite3::Database.new database
db = SQLite3::Database.open database
db.execute "CREATE TABLE IF NOT EXISTS Dev(Id INTEGER PRIMARY KEY,DevCaseGid NUMBER, DevMessageVersionNumber NUMBER, LineNumber NUMBER)"
db.execute "CREATE TABLE IF NOT EXISTS Traffic(Id INTEGER PRIMARY KEY,Type TEXT)"
db.execute "CREATE TABLE IF NOT EXISTS users(uid INTEGER PRIMARY KEY,name TEXT, push_service TEXT, push_api_key TEXT);"
db.execute "CREATE TABLE IF NOT EXISTS notifications(uid INTEGER,line TEXT,priority INTEGER);"
db.execute "CREATE UNIQUE INDEX IF NOT EXISTS uniq on notifications (uid,line);"

### Methods - START ### 

def parse(json)
    begin
        result = JSON.parse(json)
    rescue Exception => e
        puts "Couldn't parse the JSON. Skipping"
        return nil
    end
    return result
end

def fetch(uri)
    $try = 0
    $max_tries = 5
    response = nil

    while $try < $max_tries  do
        response = Net::HTTP.get_response(uri)
        if response.code == "200"
            return response
        end
        $try +=1
    end
    puts "All attempts to fetch the json failed, returning nil."
    return response
end

def push(header,name,uid,push_service,push_api_key,payload)
    puts "Trying to push \"#{header}\" to #{name}(#{uid}) through #{push_service}(#{push_api_key})."
    if File.exist?("#{lib_path}/#{push_service}")
        load "#{lib_path}/#{push_service}"
        push_method(push_api_key,header,payload)
    elsif File.exist?("#{libexec_path}/#{push_service}")
        system "#{libexec_path}/#{push_service}",push_api_key,header,payload
    else
        puts "unknown #{push_service}"
    end
end

### Methods - END ###

loop do
    time = Time.new
    puts "#{time.strftime("%Y-%m-%d %H:%M:%S")} - Starting loop - SL-distruby."

    uri = URI("https://api.sl.se/api2/deviationsrawdata.json?key=#{dev_key}")
    response = fetch(uri)

    if response
        result = parse(response.body)
        if ! result
            next
        end
        result["ResponseData"].each do |entry|
            _DevCaseGid = nil
            new_DevMessageVersionNumber = nil
            _DevCaseGid = entry["DevCaseGid"]
            _Header = entry["Header"]
            payload = entry["Details"]
            payload << " Priority #{entry["Priority"]}"
            _LineNumber = entry["LineNumber"].to_i
            new_DevMessageVersionNumber = entry["DevMessageVersionNumber"]
            _DevMessageVersionNumber = db.get_first_value "SELECT DevMessageVersionNumber FROM Dev WHERE DevCaseGid = :_DevCaseGid and LineNumber = :_LineNumber ORDER BY DevMessageVersionNumber DESC LIMIT 1", _DevCaseGid,_LineNumber
            if _DevMessageVersionNumber.nil?
                _DevMessageVersionNumber = 0
            end

            # Handle newer data then the data in the database.
            if _DevMessageVersionNumber < new_DevMessageVersionNumber
                db.execute "INSERT INTO Dev(DevCaseGid,DevMessageVersionNumber,LineNumber) VALUES (?,?,?)", _DevCaseGid,new_DevMessageVersionNumber, _LineNumber
    
                stm = db.prepare "SELECT users.uid,name,push_service,push_api_key,priority FROM users,notifications WHERE users.uid = notifications.uid and line = :_LineNumber"
                rs = stm.execute _LineNumber
                db.results_as_hash = true
    
                rs.each do |row|
                    if entry["Priority"] > row['priority'] 
                        push(_Header,row['uid'],row['push_service'],row['push_api_key'],payload)
                    end
                end

                stm.close
            end
        end
    else 
        puts "ERROR"
    end
    
    uri = URI("https://api.sl.se/api2/trafficsituation.json?key=#{traffic_key}")
    response = fetch(uri)
    
    if response
        result = parse(response.body)
        if ! result
            next
        end
        result["ResponseData"]['TrafficTypes'].each do |entry|
            type = entry['Type']
            entry["Events"].each do |event|
                if event["StatusIcon"] != "EventGood"
                    _EventId = event['EventId']
                    payload = event['Message']
                    if event['EventInfoUrl']
                        payload << "\n#{event['EventInfoUrl']}"
                    end
                    _TrafficLine = event['TrafficLine']
                    in_database = db.get_first_value "SELECT Id FROM Traffic WHERE Id = :_EventId and Type = :type LIMIT 1", _EventId, type
                    if in_database.nil?
                        db.execute "INSERT INTO Traffic(Id,Type) VALUES (?,?)", _EventId,type

                        stm = db.prepare "SELECT users.uid,name,push_service,push_api_key,priority FROM users,notifications WHERE users.uid = notifications.uid and line = :_LineNumber"
                        rs = stm.execute type
                        db.results_as_hash = true
                        rs.each do |row|
                            push(_Header,row['uid'],row['push_service'],row['push_api_key'],payload)
                        end
                        stm.close
                    end
                end
            end
        end
    end

    time = Time.new
    puts "#{time.strftime("%Y-%m-%d %H:%M:%S")} - Completed loop - SL-Distruby"
    sleep 300
end

trap('INT') do
        db.close if db
        puts "Graceful shutdown..."
        exit 0
end
